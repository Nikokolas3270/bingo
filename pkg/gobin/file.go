// Copyright (c) Bartłomiej Płotka @bwplotka
// Licensed under the Apache License 2.0.

package gobin

import (
	"go/parser"
	"go/token"
	"io"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"text/template"

	"github.com/pkg/errors"
)

// VersionV1 is the version of the file format produced by this gobin version.
const VersionV1 = "v1.0.0"

// Parse parsers gobin Go binaries file and returns packages. See `binariesFileTemplate` for the
// format of the file.
// Supports VersionV1 files only.
func Parse(filePath string, file io.Reader) (packages []string, _ error) {
	binFileAst, err := parser.ParseFile(token.NewFileSet(), filepath.Base(filePath), file, 0)
	if err != nil {
		return nil, errors.Wrapf(err, "read %s", filePath)
	}
	for _, importSpec := range binFileAst.Imports {
		pkg, err := strconv.Unquote(importSpec.Path.Value)
		if err != nil {
			return nil, err
		}
		packages = append(packages, pkg)
	}
	return packages, nil
}

const binariesFileTemplate = `// Code generated by https://github.com/bwplotka/gobin . DO NOT EDIT.
// NOTE: Actually you can edit just fine, just don't be surprised if the file will be rewritten at some point by
// gobin tool.
//
// This file is and extended version of somethings that is called "tools.go package" described here: https://github.com/golang/go/issues/25922#issuecomment-590529870
// It allows go modules to maintain certain version of binaries you or your project use.
// Main extension that bwplotka/gobin adds, is that the file has to be stored as the separate go module file, which allows
// separation of dev tools from critical, production code which is th key.
//
// Read more on https://github.com/bwplotka/gobin .

// +build tools
package {{ .ModDir }}

import (
{{- range .Packages }}
	_ "{{ . }}"
{{- end}}
)

const (
	// FileVersion represents version of this file. This will tell future versions of gobin how to parse this file.
	FileVersion = "v1.0.0"
	// Gobin version used to generate this file. Used for debugging only.
	GobinVersion = "{{ .GobinVersion }}"
)
`

// DedupAndWrite removes and creates again the gobin file with given binaries.
// Before generating given binaries are sorted and deduplicated.
func DedupAndWrite(filePath string, file io.Writer, packages []string) error {
	tmpl, err := template.New(filepath.Base(filePath)).Parse(binariesFileTemplate)
	if err != nil {
		return errors.Wrap(err, "parse gobin template")
	}

	_, modDir := filepath.Split(filepath.Dir(filePath))
	modDir = strings.TrimLeft(modDir, ".")

	if modDir == "" {
		return errors.Errorf("moddir cannot be empty, got filePath: %v", filePath)
	}
	data := struct {
		GobinVersion string
		ModDir       string

		Packages []string
	}{
		GobinVersion: "??",
		ModDir:       modDir,
	}

	dedup := map[string]struct{}{}
	for _, p := range packages {
		if _, ok := dedup[p]; ok {
			continue
		}

		dedup[p] = struct{}{}
	}

	for p := range dedup {
		data.Packages = append(data.Packages, p)
	}
	sort.Strings(data.Packages)
	return tmpl.Execute(file, data)
}
